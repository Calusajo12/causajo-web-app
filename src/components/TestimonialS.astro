---
import type { Testimonial } from '../types/testimonial'

interface Props {
  testimonials: Testimonial[]
}

const { testimonials } = Astro.props
---

<section class="relative z-10 py-12 px-4 text-white text-center animate-fade-in">
  <div class="max-w-4xl mx-auto">
    <h2 class="text-2xl sm:text-3xl md:text-4xl font-bold mb-4">
      Más de 100 eventos e increíbles momentos mágicos.
    </h2>

    <div class="testimonial-carousel mt-8">

      <div class="relative">
        {
          testimonials.map((t, index) => (
            <div 
              class={`testimonial-slide flex flex-col items-center gap-4 text-white transition-opacity duration-500 ${
                index === 0 ? 'opacity-100' : 'opacity-0 absolute inset-0'
              }`}
            >
             

              <!-- Nombre y rol -->
              <div class="flex flex-col sm:flex-row sm:items-center sm:gap-4 text-sm text-white">
                <span class="font-semibold">{t.name}</span>
                <span class="hidden sm:block h-4 w-px bg-white/50"></span>
                <span class="text-white/70">{t.role}</span>
              </div>

              <!-- Estrellas -->
              <div class="text-yellow-400 text-lg space-x-1">
                ★ ★ ★ ★ ★
              </div>

              <!-- Cita -->
              <p class="italic font-semibold text-white text-sm sm:text-base max-w-xl">
                "{t.content}"
              </p>
            </div>
          ))
        }
      </div>

      <div class="flex justify-center gap-2 mt-5">
        {
          testimonials.map((_, index) => (
            <button
              class={`w-2 h-2 rounded-full transition-all ${
                index === 0 ? 'bg-white' : 'bg-white/40'
              }`}
              data-slide={index}
            ></button>
          ))
        }
      </div>
    </div>
  </div>
</section>
<script>
  class TestimonialCarousel {
    private currentSlide = 0;
    private slides: NodeListOf<Element>;
    private indicators: NodeListOf<Element>;
    private interval: ReturnType<typeof setInterval> | undefined;
    private totalSlides: number;

    constructor() {
      this.slides = document.querySelectorAll('.testimonial-slide');
      this.indicators = document.querySelectorAll('[data-slide]');
      this.totalSlides = this.slides.length;
      
      if (this.totalSlides === 0) return;
      
      this.setupEventListeners();
      this.startAutoplay();
    }

    private showSlide(index: number): void {
      // Ocultar slide actual
      this.slides[this.currentSlide].classList.remove('opacity-100');
      this.slides[this.currentSlide].classList.add('opacity-0');
      this.indicators[this.currentSlide].classList.remove('bg-white');
      this.indicators[this.currentSlide].classList.add('bg-white/40');

      // Mostrar nuevo slide
      this.slides[index].classList.remove('opacity-0');
      this.slides[index].classList.add('opacity-100');
      this.indicators[index].classList.remove('bg-white/40');
      this.indicators[index].classList.add('bg-white');

      this.currentSlide = index;
    }

    private nextSlide(): void {
      const next = (this.currentSlide + 1) % this.totalSlides;
      this.showSlide(next);
    }

    private startAutoplay(): void {
      this.stopAutoplay(); // Limpiar intervalo existente si hay
      this.interval = setInterval(() => this.nextSlide(), 5000);
    }

    private stopAutoplay(): void {
      if (this.interval) {
        clearInterval(this.interval);
        this.interval = undefined;
      }
    }

    private setupEventListeners(): void {
      // Click en indicadores
      this.indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          this.showSlide(index);
          this.startAutoplay(); // Reiniciar autoplay después del clic
        });
      });

      // Pausar en hover
      const carousel = document.querySelector('.testimonial-carousel');
      if (carousel) {
        carousel.addEventListener('mouseenter', () => this.stopAutoplay());
        carousel.addEventListener('mouseleave', () => this.startAutoplay());
      }
    }

    public cleanup(): void {
      this.stopAutoplay();
    }
  }

  let carouselInstance: TestimonialCarousel | undefined;

  // Función para inicializar el carrusel
  function initCarousel() {
    if (carouselInstance) {
      carouselInstance.cleanup();
    }
    carouselInstance = new TestimonialCarousel();
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('astro:page-load', initCarousel);
  
  // Limpiar cuando la página se desmonte
  document.addEventListener('astro:before-swap', () => {
    if (carouselInstance) {
      carouselInstance.cleanup();
      carouselInstance = undefined;
    }
  });
</script>
<style>
  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-220px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in {
    animation: fadeInDown 500ms ease-out forwards;
  }
</style>