---
import type { EventType } from '../../eventType';

export interface Props {
  events: EventType[];
}

const { events } = Astro.props;
---

<div class="carousel-container w-full overflow-hidden relative">
  <div class="carousel-inner flex transition-transform duration-300 ease-in-out"  data-current="0">
    {
      events.map((event, index) => (
        <div class="carousel-item w-full flex-shrink-0" style="flex: 0 0 100%;">
          <div class="flex flex-col items-center p-2">
            <h2 class="font-bold text-xl pb-2">{event.title}</h2>
            <img class="h-auto w-auto max-w-dvw object-contain rounded-lg mx-auto" src={event.image} alt={event.title} />
            <a href={event.link} target="_blank" rel="noopener noreferrer">
              <div class="flex items-center justify-center pt-2">
                <p class="underline inline-flex items-center">Cótiza ya</p>
              </div>
            </a>
          </div>
        </div>
      ))
    }
  </div>
  
  
  
  <div class="carousel-indicators flex justify-center mt-2">
    {
      events.map((_, index) => (
        <button
          class="carousel-indicator w-2 h-2 rounded-full bg-gray-300 mx-1"
          data-index={index}
          aria-label={`Ir a la diapositiva ${index + 1}`}
        />
      ))
    }
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Selecciona elementos del carrusel
    const container = document.querySelector('.carousel-container') as HTMLElement;
    const inner = document.querySelector('.carousel-inner') as HTMLElement;
    const indicators = document.querySelectorAll('.carousel-indicator');
    
    if (!container || !inner) return;
    
    // Variables para el manejo táctil
    let startX = 0;
    let isDragging = false;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let currentIndex = 0;
    const itemCount = inner.children.length;
    
    // Actualiza los indicadores activos
    function updateIndicators() {
      indicators.forEach((indicator, idx) => {
        if (idx === currentIndex) {
          indicator.classList.add('bg-amber-400', 'w-3', 'h-3');
          indicator.classList.remove('bg-gray-300', 'w-2', 'h-2');
        } else {
          indicator.classList.add('bg-gray-300', 'w-2', 'h-2');
          indicator.classList.remove('bg-amber-400', 'w-3', 'h-3');
        }
      });
    }
    
    // Navega a una diapositiva específica (modo infinito)
    function goToSlide(index: number) {
      // Implementación del carrusel infinito
      if (index < 0) index = itemCount - 1; // Si va antes de la primera, vuelve a la última
      if (index >= itemCount) index = 0;   // Si va después de la última, vuelve a la primera
      
      currentIndex = index;
      prevTranslate = currentIndex * -container.offsetWidth;
      currentTranslate = prevTranslate;
      
      inner.style.transform = `translateX(${currentTranslate}px)`;
      updateIndicators();
    }
    
    // Inicializa los indicadores
    indicators.forEach((indicator, idx) => {
      indicator.addEventListener('click', () => {
        goToSlide(idx);
      });
    });
    
    // Eventos táctiles para móvil
    container.addEventListener('touchstart', (e: TouchEvent) => {
      startX = e.touches[0].clientX;
      isDragging = true;
      
      // Evita la animación durante el arrastre
      inner.style.transition = 'none';
    });
    
    // Eventos para ratón (ordenadores sin pantalla táctil)
    container.addEventListener('mousedown', (e: MouseEvent) => {
      startX = e.clientX;
      isDragging = true;
      
      // Evita la animación durante el arrastre
      inner.style.transition = 'none';
      
      // Previene selección de texto durante el arrastre
      e.preventDefault();
    });
    
    container.addEventListener('touchmove', (e: TouchEvent) => {
      if (!isDragging) return;
      
      const currentX = e.touches[0].clientX;
      const diff = currentX - startX;
      
      updateTranslate(diff);
    });
    
    // Evento para mover con ratón
    window.addEventListener('mousemove', (e: MouseEvent) => {
      if (!isDragging) return;
      
      const currentX = e.clientX;
      const diff = currentX - startX;
      
      updateTranslate(diff);
    });
    
    // Función común para actualizar la posición (adaptada para carrusel infinito)
    function updateTranslate(diff: number) {
      // En modo infinito, permitimos siempre el movimiento completo
      currentTranslate = prevTranslate + diff;
      inner.style.transform = `translateX(${currentTranslate}px)`;
    }
    
    container.addEventListener('touchend', () => {
      finishDrag();
    });
    
    // Evento para finalizar el arrastre con ratón
    window.addEventListener('mouseup', () => {
      if (isDragging) {
        finishDrag();
      }
    });
    
    // Función común para finalizar el arrastre (adaptada para carrusel infinito)
    function finishDrag() {
      isDragging = false;
      inner.style.transition = 'transform 0.3s ease-in-out';
      
      const threshold = container.offsetWidth * 0.2; // 20% del ancho para cambiar de slide
      const diff = currentTranslate - prevTranslate;
      
      if (Math.abs(diff) > threshold) {
        // Determinar dirección
        if (diff > 0) {
          // Hacia la derecha (anterior) - ahora con bucle infinito
          goToSlide(currentIndex - 1);
        } else {
          // Hacia la izquierda (siguiente) - ahora con bucle infinito
          goToSlide(currentIndex + 1);
        }
      } else {
        // No alcanzó el umbral, vuelve a la posición original
        goToSlide(currentIndex);
      }
    }
    
    // Manejo del redimensionamiento de la ventana
    window.addEventListener('resize', () => {
      // Reposicionar con el tamaño actual
      inner.style.transition = 'none';
      goToSlide(currentIndex);
      // Restaurar transición después de posicionar
      setTimeout(() => {
        inner.style.transition = 'transform 0.3s ease-in-out';
      }, 50);
    });
    
    // Configurar botones de navegación
    const prevButton = document.querySelector('.carousel-prev');
    const nextButton = document.querySelector('.carousel-next');
    
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        goToSlide(currentIndex - 1);
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        goToSlide(currentIndex + 1);
      });
    }
    
    
    updateIndicators();
  });
</script>

<style>
  .carousel-container {
    position: relative;
    touch-action: pan-y;
    cursor: grab;
    height: auto;
    margin-bottom: 1rem;
    overflow: hidden; /* Cambiado de visible a hidden para evitar desbordamiento */
    width: 100%; /* Asegura que el contenedor no se desborde horizontalmente */
  }
  
  .carousel-container:active {
    cursor: grabbing;
  }

  .carousel-prev, .carousel-next {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
  }

  .carousel-inner img {
    transition: transform 0.3s ease;
  }

  

  .carousel-indicators {
    position: relative;
    z-index: 5;
  }
</style>
