---
import type { EventType } from '../types/eventType';

export interface Props {
  events: EventType[];
}

const { events } = Astro.props;
---

<div class="carousel-container w-full overflow-hidden relative">
  <div class="carousel-inner flex transition-transform duration-300 ease-in-out"  data-current="0">
    {
      events.map((event, index) => (
        <div class="carousel-item w-full px-2 flex-shrink-0" style="flex: 0 0 100%;">
          <div class="flex flex-col items-center p-1">
            <h2 class="font-bold text-xl pb-2">{event.title}</h2>
            <div class="carousel-image-container">
              <img 
                class="carousel-image" 
                src={event.image} 
                alt={event.title}
                loading="eager"
                onload="this.classList.add('loaded')"
              />
            </div>
            <a href={event.link} target="_blank" rel="noopener noreferrer">
              <div class="flex items-center justify-center pt-2">
                <p class="underline inline-flex items-center">Cótiza ya</p>
              </div>
            </a>
          </div>
        </div>
      ))
    }
  </div>
  
  
  
  <div class="carousel-indicators flex justify-center">
    {
      events.map((_, index) => (
        <button
          class="carousel-indicator w-2 h-2 rounded-full bg-gray-300 mx-1"
          data-index={index}
          aria-label={`Ir a la diapositiva ${index + 1}`}
        />
      ))
    }
  </div>
</div>

<script>
  // Función para inicializar el carrusel
  function initializeCarousel() {
    // Limpiar event listeners anteriores si existen
    if ((window as any).carouselCleanup) {
      (window as any).carouselCleanup();
    }

    // Selecciona elementos del carrusel
    const container = document.querySelector('.carousel-container') as HTMLElement;
    const inner = document.querySelector('.carousel-inner') as HTMLElement;
    const indicators = document.querySelectorAll('.carousel-indicator');
    
    if (!container || !inner) return;
    
    // Variables para el manejo táctil
    let startX = 0;
    let isDragging = false;
    let currentTranslate = 0;
    let prevTranslate = 0;
    let currentIndex = 0;
    const itemCount = inner.children.length;

    // Array para almacenar los event listeners para poder limpiarlos después
    const eventListeners: Array<{ element: any, event: string, handler: any }> = [];

    // Función helper para agregar event listeners que se pueden limpiar
    function addEventListenerWithCleanup(element: any, event: string, handler: any) {
      element.addEventListener(event, handler);
      eventListeners.push({ element, event, handler });
    }

    // Función para manejar la carga de imágenes del carrusel
    function handleCarouselImageLoading() {
      const images = container.querySelectorAll('.carousel-image') as NodeListOf<HTMLImageElement>;
      images.forEach((img) => {
        if (img.complete) {
          img.classList.add('loaded');
        } else {
          const loadHandler = function(this: HTMLImageElement) {
            this.classList.add('loaded');
          };
          const errorHandler = function(this: HTMLImageElement) {
            console.warn('Error loading carousel image:', this.src);
            this.classList.add('loaded'); // Mostrar aunque falle
          };
          addEventListenerWithCleanup(img, 'load', loadHandler);
          addEventListenerWithCleanup(img, 'error', errorHandler);
        }
      });
    }
    
    // Actualiza los indicadores activos
    function updateIndicators() {
      indicators.forEach((indicator, idx) => {
        if (idx === currentIndex) {
          indicator.classList.add('bg-amber-400', 'w-3', 'h-3');
          indicator.classList.remove('bg-gray-300', 'w-2', 'h-2');
        } else {
          indicator.classList.add('bg-gray-300', 'w-2', 'h-2');
          indicator.classList.remove('bg-amber-400', 'w-3', 'h-3');
        }
      });
    }
    
    // Navega a una diapositiva específica (modo infinito)
    function goToSlide(index: number) {
      // Implementación del carrusel infinito
      if (index < 0) index = itemCount - 1; // Si va antes de la primera, vuelve a la última
      if (index >= itemCount) index = 0;   // Si va después de la última, vuelve a la primera
      
      currentIndex = index;
      prevTranslate = currentIndex * -container.offsetWidth;
      currentTranslate = prevTranslate;
      
      inner.style.transform = `translateX(${currentTranslate}px)`;
      updateIndicators();
    }
    
    // Inicializa los indicadores
    indicators.forEach((indicator, idx) => {
      const clickHandler = () => goToSlide(idx);
      addEventListenerWithCleanup(indicator, 'click', clickHandler);
    });
    
    // Eventos táctiles para móvil
    const touchStartHandler = (e: TouchEvent) => {
      startX = e.touches[0].clientX;
      isDragging = true;
      inner.style.transition = 'none';
    };
    addEventListenerWithCleanup(container, 'touchstart', touchStartHandler);
    
    // Eventos para ratón (ordenadores sin pantalla táctil)
    const mouseDownHandler = (e: MouseEvent) => {
      startX = e.clientX;
      isDragging = true;
      inner.style.transition = 'none';
      e.preventDefault();
    };
    addEventListenerWithCleanup(container, 'mousedown', mouseDownHandler);
    
    const touchMoveHandler = (e: TouchEvent) => {
      if (!isDragging) return;
      const currentX = e.touches[0].clientX;
      const diff = currentX - startX;
      updateTranslate(diff);
    };
    addEventListenerWithCleanup(container, 'touchmove', touchMoveHandler);
    
    // Evento para mover con ratón
    const mouseMoveHandler = (e: MouseEvent) => {
      if (!isDragging) return;
      const currentX = e.clientX;
      const diff = currentX - startX;
      updateTranslate(diff);
    };
    addEventListenerWithCleanup(window, 'mousemove', mouseMoveHandler);
    
    // Función común para actualizar la posición (adaptada para carrusel infinito)
    function updateTranslate(diff: number) {
      // En modo infinito, permitimos siempre el movimiento completo
      currentTranslate = prevTranslate + diff;
      inner.style.transform = `translateX(${currentTranslate}px)`;
    }
    
    // Función común para finalizar el arrastre (adaptada para carrusel infinito)
    function finishDrag() {
      isDragging = false;
      inner.style.transition = 'transform 0.3s ease-in-out';
      
      const threshold = container.offsetWidth * 0.2; // 20% del ancho para cambiar de slide
      const diff = currentTranslate - prevTranslate;
      
      if (Math.abs(diff) > threshold) {
        // Determinar dirección
        if (diff > 0) {
          // Hacia la derecha (anterior) - ahora con bucle infinito
          goToSlide(currentIndex - 1);
        } else {
          // Hacia la izquierda (siguiente) - ahora con bucle infinito
          goToSlide(currentIndex + 1);
        }
      } else {
        // No alcanzó el umbral, vuelve a la posición original
        goToSlide(currentIndex);
      }
    }

    const touchEndHandler = () => finishDrag();
    addEventListenerWithCleanup(container, 'touchend', touchEndHandler);
    
    // Evento para finalizar el arrastre con ratón
    const mouseUpHandler = () => {
      if (isDragging) {
        finishDrag();
      }
    };
    addEventListenerWithCleanup(window, 'mouseup', mouseUpHandler);
    
    // Manejo del redimensionamiento de la ventana
    const resizeHandler = () => {
      // Reposicionar con el tamaño actual
      inner.style.transition = 'none';
      goToSlide(currentIndex);
      // Restaurar transición después de posicionar
      setTimeout(() => {
        inner.style.transition = 'transform 0.3s ease-in-out';
      }, 50);
    };
    addEventListenerWithCleanup(window, 'resize', resizeHandler);
    
    // Configurar botones de navegación
    const prevButton = document.querySelector('.carousel-prev');
    const nextButton = document.querySelector('.carousel-next');
    
    if (prevButton) {
      const prevClickHandler = () => goToSlide(currentIndex - 1);
      addEventListenerWithCleanup(prevButton, 'click', prevClickHandler);
    }
    
    if (nextButton) {
      const nextClickHandler = () => goToSlide(currentIndex + 1);
      addEventListenerWithCleanup(nextButton, 'click', nextClickHandler);
    }
    
    updateIndicators();
    handleCarouselImageLoading();

    // Función de limpieza para remover todos los event listeners
    (window as any).carouselCleanup = () => {
      eventListeners.forEach(({ element, event, handler }) => {
        element.removeEventListener(event, handler);
      });
      eventListeners.length = 0;
    };
  }

  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCarousel);
  } else {
    initializeCarousel();
  }

  // Reinicializar en navegación de Astro
  document.addEventListener('astro:page-load', initializeCarousel);
  
  // Limpiar cuando se navega fuera de la página
  document.addEventListener('astro:before-preparation', () => {
    if ((window as any).carouselCleanup) {
      (window as any).carouselCleanup();
    }
  });
</script>

<style>
  .carousel-container {
    position: relative;
    touch-action: pan-y;
    cursor: grab;
    height: auto;
    margin-bottom: 1rem;
    overflow: hidden; 
    width: 100%; 
  }
  
  .carousel-container:active {
    cursor: grabbing;
  }

  .carousel-prev, .carousel-next {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
  }

  .carousel-inner img {
    transition: transform 0.3s ease;
  }

  .carousel-image-container {
    width: calc(100vw - 2rem); 
    max-width: calc(100vw - 2rem); 
    height: 350px; 
    margin: 0 auto;
    border-radius: 0.5rem;
    overflow: hidden;
    background-color: #f3f4f6; 
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .carousel-image {
    width: 100%;
    height: 100%;
    object-fit: cover; 
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }
  
  .carousel-image.loaded {
    opacity: 1;
  }

  @media (max-width: 640px) {
    .carousel-image-container {
      width: calc(100vw - 1.5rem); 
      max-width: calc(100vw - 1.5rem);
      height: 300px; 
    }
  }

  @media (min-width: 641px) and (max-width: 768px) {
    .carousel-image-container {
      width: calc(100vw - 2rem);
      max-width: calc(100vw - 2rem);
      height: 300px; 
    }
  }

  @media (min-width: 769px) {
    .carousel-image-container {
      width: calc(100vw - 3rem); 
      max-width: calc(100vw - 3rem);
      height: 300px; 
    }
  }

  

  .carousel-indicators {
    position: relative;
    z-index: 5;
  }
</style>
